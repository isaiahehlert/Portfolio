{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .SFNS-Bold;\f1\fnil\fcharset0 .SFNS-Regular;\f2\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;
\f3\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;}
{\*\expandedcolortbl;;\cssrgb\c6700\c6700\c6700;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f0\b\fs34 \cf2 	Project Description\

\f1\b0\fs28 \cf2 As a security analyst, I used SQL to investigate potential security incidents by filtering data from 
\f2 log_in_attempts
\f1  and 
\f2 employees
\f1  tables. This included analyzing failed logins after business hours, isolating events by date, and identifying employees in or outside specific departments. I applied 
\f2 AND
\f1 , 
\f2 OR
\f1 , 
\f2 NOT
\f1 , and 
\f2 LIKE
\f1  operators to construct multi-condition filters for deeper insights.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f0\b\fs30 \cf2 	Retrieve after hours failed login attempts\
SELECT * \
FROM log_in_attempts \
WHERE login_time > '18:00:00' AND success = 0;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 	This query retrieves login attempts that happened 
\f3\b \cf2 after 6 PM
\f1\b0 \cf2  and 
\f3\b \cf2 failed
\f1\b0 \cf2  (
\f2 success = 0
\f1 ). It uses the 
\f2 AND
\f1  operator to ensure both conditions are true.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f0\b\fs30 \cf2 	Retrieve login attempts on specific dates\
SELECT * \
FROM log_in_attempts \
WHERE login_date = '2022-05-08' OR login_date = '2022-05-09';\

\f1\b0\fs28 \cf2 	This query filters logins that happened on 
\f3\b \cf2 either May 8 or May 9, 2022
\f1\b0 \cf2 . The 
\f2 \cf2 OR
\f1 \cf2  operator ensures that rows matching either date are included.\
\

\f0\b\fs30 \cf2 	Retrieve login attempts outside of Mexico\
SELECT * \
FROM log_in_attempts \
WHERE NOT country LIKE 'MEX%';\

\f1\b0\fs28 \cf2 	This query excludes any login attempts originating from 
\f2 \cf2 MEX
\f1 \cf2  or 
\f2 \cf2 MEXICO
\f1 \cf2 . It uses 
\f2 \cf2 LIKE
\f1 \cf2  to match both formats, and 
\f2 \cf2 NOT
\f1 \cf2  to return everything else.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f0\b\fs30 \cf2 	Retrieve employees in Marketing\
SELECT * \
FROM employees \
WHERE department = 'Marketing' AND office LIKE 'East-%';\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 	This returns all employees in the 
\f3\b \cf2 Marketing
\f1\b0 \cf2  department whose office is in the 
\f3\b \cf2 East building
\f1\b0 \cf2 . The 
\f2 LIKE
\f1  operator matches office names like 
\f2 East-170
\f1 , 
\f2 East-320
\f1 , etc.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f0\b\fs30 \cf2 	 Retrieve employees in Finance or Sales\
SELECT * \
FROM employees \
WHERE department = 'Finance' OR department = 'Sales';\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 	This returns all employees in 
\f3\b \cf2 either the Finance or Sales departments
\f1\b0 \cf2  using two full conditions combined with 
\f2 OR
\f1 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f0\b\fs30 \cf2 	Retrieve all employees not in IT\
SELECT * \
FROM employees \
WHERE NOT department = 'Information Technology';\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl324\slmult1\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf2 	This query filters out any employees in the 
\f3\b \cf2 Information Technology
\f1\b0 \cf2  department. The 
\f2 NOT
\f1  operator inverts the match.\
\

\f0\b\fs34 \cf2 			Summary\
\pard\tx860\tx1420\tx1980\tx2540\tx3100\tx3660\tx4220\tx4780\tx5340\tx5900\tx6460\tx7020\li300\sl324\slmult1\partightenfactor0

\f1\b0\fs28 \cf2 This project demonstrates how to use SQL to isolate specific data patterns for cybersecurity analysis. By using logical operators like 
\f2 AND
\f1 , 
\f2 OR
\f1 , and 
\f2 NOT
\f1 , I was able to extract failed logins, identify high-risk employee groups, and locate relevant login activity. These techniques support incident response, employee access reviews, and machine update planning.}